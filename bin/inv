#!/usr/bin/env node
require('shelljs/global')
config.silent = true

const path = require('path')
const cwd = process.cwd()
const pkgOld = JSON.parse(cat('./package.json'))

const args = process.argv
const validBumps = [
  'major', 'premajor',
  'minor', 'preminor',
  'patch', 'prepatch',
  'prerelease'
]

// All our help flags get hit automatically :)
if(3 !== args.length || validBumps.indexOf(args[2]) === -1) {
  myV = JSON.parse(cat(`${__dirname}/../package.json`)).version
  echo(`\n    inv@${myV}`)
  echo(cat(`${__dirname}/../usage.txt`))
  exit(0)
}

const bump = args[2]

const files = [
  'package.json',
  'README',
  'README.*',
  'readme',
  'readme.*',
  'CHANGELOG',
  'CHANGELOG.*',
  'LICENSE',
  'LICENSE-*'
]
.concat(pkgOld.files || [])
.concat(pkgOld.main || [])

const ignore = [
  // note that we don't want to kill .git
  'CVS',
  '.svn',
  '.hg',
  '.lock-wscript',
  '.wafpickle-N',
  '*.swp',
  '.DS_Store',
  '._*',
  'npm-debug.log'
]

const genericErrorMsg = [
  'Version updating failed!',
  'Please make sure the current directory is the root of a git repository',
  'and you have no uncommitted changes.'
].join(' ')

const run = (cmds, errMsg) => {
  const cmd = (cmds instanceof Array ? cmds : [cmds]).join(' && ')
  const res = exec(cmd)
  if(res.code !== 0) {
    echo(errMsg || res.stderr || res.stdout || genericErrorMsg)
    exit(1)
  }
  return res
}

if(!test('-d', '.git')) {
  echo(genericErrorMsg)
  exit(1)
}

if(run([
    'git update-index -q --refresh',
    'git diff-index --name-only HEAD']).stdout.trim().length) {
  echo('Please make sure you have no uncommitted changes.')
  exit(1)
}

// Bump the local package, we'll tag/commit ourselves
run(`npm --no-git-tag-version version ${bump}`)

// read new updated version
const versionNew = JSON.parse(cat('./package.json')).version
run([
  `git commit package.json -m "chore: Bump version (v${versionNew})"`,
  `git tag v${versionNew}-dev`
], 'Failed to make local commits and tags, is this a git repository?')

// A nice temp repo for us to work with
const uid = `inv-${process.pid}-${Date.now()}`
const tmp = path.join(tempdir(), uid)
mkdir(tmp)
run(`git clone . ${tmp}`)
pushd(tmp)
run([
  `git checkout --orphan ${uid}`,
  'git rm -rf .'
])
popd()

// Add stuff from `files`
files.forEach((f) => {
  cp('-R', f, path.join(tmp))
})

// Correct if we copied over anything that should be ignored
ignore.forEach((f) => {
  rm('-rf', path.join(tmp, f))
})

// Commit and tag release files
pushd(tmp)
run([
  'git add -A',
  `git commit -m  "chore: Bundling release v${versionNew}`,
  `git tag v${versionNew}`
])
popd()

// Copy tags back to main repo
run(`git fetch --tags ${tmp}`)

// Clean up tmp
rm('-rf', tmp)

echo(`v${versionNew}`)
