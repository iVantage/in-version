#!/usr/bin/env node
require('shelljs/global')
config.silent = true

const path = require('path')
const cwd = process.cwd()
const pkgOld = JSON.parse(cat('./package.json'))

const args = process.argv
const validBumps = [
  'major', 'premajor',
  'minor', 'preminor',
  'patch', 'prepatch',
  'prerelease'
]

// All our help flags get hit automatically :)
if(3 !== args.length || validBumps.indexOf(args[2]) === -1) {
  myV = JSON.parse(cat(`${__dirname}/../package.json`)).version
  echo(`\n    inv@${myV}`)
  echo(cat(`${__dirname}/../usage.txt`))
  exit(0)
}

const bump = args[2]

const files = [
  'package.json',
  'README',
  'README.*',
  'readme',
  'readme.*',
  'CHANGELOG',
  'CHANGELOG.*',
  'LICENSE',
  'LICENSE-*'
]
.concat(pkgOld.files || [])
.concat(pkgOld.main || [])

const ignore = [
  // note that we don't want to kill .git
  'CVS',
  '.svn',
  '.hg',
  '.lock-wscript',
  '.wafpickle-N',
  '*.swp',
  '.DS_Store',
  '._*',
  'npm-debug.log'
]

// Bump the local package, we'll tag/commit outselves
exec(`npm --no-git-tag-version version ${bump}`)

// read new updated version
const versionNew = JSON.parse(cat('./package.json')).version
exec(`git commit package.json -m "chore: Bump version (v${versionNew})"`)
exec(`git tag v${versionNew}-dev`)

// A nice temp repo for us to work with
const uid = `inv-${process.pid}-${Date.now()}`
const tmp = path.join(tempdir(), uid)
mkdir(tmp)
exec(`git clone . ${tmp}`)
pushd(tmp)
exec(`git checkout --orphan ${uid}`)
exec('git rm -rf .')
popd()

// Add stuff from `files`
files.forEach((f) => {
  cp('-R', f, path.join(tmp))
})

// Correct if we copied over anything that should be ignored
ignore.forEach((f) => {
  rm('-rf', path.join(tmp, f))
})

// Commit and tag release files
pushd(tmp)
exec('git add -A')
exec(`git commit -m  "chore: Bundling release v${versionNew}`)
exec(`git tag v${versionNew}`)
popd()

// Copy tags back to main repo
exec(`git fetch --tags ${tmp}`)

// Clean up tmp
rm('-rf', tmp)

console.log(`v${versionNew}`);
